#CS224
#Section No.: 01
#Spring 2018
#Lab No.: 2
#Deniz Yüksel / 21600880

	# $a0: address of the first int in the array.
	# $a1: size of the array.
	# $s0: array pointer.
	# $s1: size of the array.
	# $t6: backup of $s0
	# $s6: backup of $s1
	# $s3: size of the array in terms of bytes.
	# $t0: temporary a0.
	# $t1: for returning assignment	( backup of length).
	# $t2: for returning assignment ( address of the array).
	# $s7: used for $ra.
	
	.text
	.globl __start
__start:

MENU:	
	# ASK THE USER FOR WHAT TO DO.
	li 	$v0, 4
	la	$a0, statement
	syscall
	li	$v0, 5
	syscall
	beq	$v0, 1, readArray
	beq	$v0, 2, minMax
	beq	$v0, 3, noOfUniqueElements
	beq	$v0, 4, end
	
	li 	$v0, 4
	la	$a0, serioso
	syscall
	
readArray:

	li 	$v0, 4
	la 	$a0, msg
	syscall
	li 	$v0, 5
	syscall
	move 	$a1, $v0		# Array size will be inside $a1.
	beq	$v0, 1, MENU
	move	$s1, $v0		# Also in $s1.
	move	$s6, $v0		# Also in $s6 for monitor program.
	move	$t1, $v0		# For the very end.
	mul 	$s3, $a1, 4		# Multiply to find the size in bytes.
	sw 	$s3, arrayByteSize
	blt	$a1, 1, error
	move 	$a0, $s3		# Number of bytes to allocate.
	li 	$v0, 9			# v0 will have the address of the allocated memory now.
	syscall 
	move 	$s0, $v0		# $s0 is array's pointer now. Pointing to first element.
	move	$t6, $v0		# $t6 is the backup of s0, in monitor program.	
	move	$s7, $v0		# Second pointer.
	move	$t2, $v0
	move	$t0, $v0		# For backup.
	#sp operations...
	sub 	$sp, $sp, 12	
	sw	$s1, 8($sp)		# Store size in the stack.
	sw	$s0, 4($sp)		# Store pointer in the stack.
	sw	$ra, 0($sp)		# Remember $ra.
		
fillArray:

randomGenerator:
	li 	$v0, 42
	li 	$a0, 0		# a0 has the random number after generation.
	la 	$a1, 100
	syscall	
	move 	$t0, $a0	# Save a0 temporarily.
	bleu 	$s1, 0, printArray
	sw  	$t0, 0($s0)
	sub 	$s1, $s1, 1	# Decr size.
	addi 	$s0, $s0, 4	# increment pointer.
	j randomGenerator
		
printArray:
	lw	$s0, 4($sp)
	lw	$s1, 8($sp)
	addi	$sp, $sp, 8
Loop:
	lw  	$a0, 0($s0)
	# there was a move here...
	sub 	$s1, $s1, 1	# Decr size.
	addi 	$s0, $s0, 4	# increment pointer.
	li 	$v0, 1
	syscall
	beqz 	$s1, continue
	li 	$v0, 4
	la 	$a0, newLine
	syscall
	j Loop
		
continue:
	li 	$v0, 4
	la 	$a0, continuing
	syscall	
	#lw  $ra, 0($sp)		# Restore sp and ra.
	addi 	$sp, $sp, 12	
	move 	$a0, $t2			# Copy the address.
	move 	$a1, $t1			# Copy the size.
	#jr $ra it works when the restore line is commented.
	
bubbleSort:		# Receives $a1 and $a0, sorts the list.
	#sp operations...
	addi	$s1, $a1, 0		# Use s1 for size, s0 for address.
	addi	$s0, $a0, 0		
	addi	$s3, $a1, -1
	sll	$s3, $s3, 1		# This is very important for bubbleSort. This is the number of checks in worst case.
	addi	$s7, $ra, 0		# Remember ra.
	sub 	$sp, $sp, 16
	sw	$s3, 12($sp)		# Store the worst case scenario.	
	sw	$s1, 8($sp)		# Store size in the stack.
	sw	$s0, 4($sp)		# Store pointer in the stack.
	sw	$s7, 0($sp)
	#jr	$ra			# Goes to jal fillArray.
	addi	$t2, $a1, -1		# To go through an array once.
goThroughOnce:
	lw	$t0, 0($s0)		# Load the first and second elements.
	lw	$t1, 4($s0)
	beqz	$t2, doneForOnce	# if t2 (length -1) is zero complete for one checking.
	slt 	$t3, $t1, $t0	
	beq	$t3, 0, skip
	beq	$t3, 1, swap
	
	
swap:	
	move 	$t3, $t0
	move	$t0, $t1
	move	$t1, $t3
	addi	$t3, $t3, 0		# Reset $t3.
	sw	$t0, 0($s0)		# Swap permanently.
	sw	$t1, 4($s0)		# Swap for good.
	addi	$s0, $s0, 4		# Advance the pointer.
	sub	$t2, $t2, 1		# Decr. count.
	j goThroughOnce

skip:
	addi	$s0, $s0, 4		# Advance the pointer.
	sub	$t2, $t2, 1		# Decr. count.
	j goThroughOnce
		
doneForOnce:	
	# Restore $s0 and $s1 to look at the list again.
	addi 	$s0, $a0, 0
	addi 	$s1, $a1, 0
	addi 	$t2, $a1, -1
	sub	$s3, $s3, 1		# Decr. $s3 ( worst case scenario number).
	beqz	$s3, sorted
	j goThroughOnce
	
sorted:
	addi 	$s0, $a0, 0		# Will proove.
	addi 	$s1, $a1, 0
	addi	$t2, $a1, 0		# For appropriate count.
proofPrint:
	li	$v0, 1
	lw	$a0, 0($s0)
	syscall
	addi	$s0, $s0, 4
	sub	$s1, $s1, 1
	beqz	$s1, done
	li 	$v0, 4
	la 	$a0, newLine
	syscall
	j proofPrint
	j done

done:
	# RESET
	addi 	$s0, $t6, 0		# Will proove. reset address.
	addi 	$s1, $s6, 0		# Reset size.
	addi	$t2, $a1, 0		# For appropriate count.
	j MENU
	
minMax:
	la	$s0, forMinMax
	move	$s5, $s0		#Backup.
	lw	$v0, 0($s0)		# min
	lw	$v1, 0($s0)		# max
	lw	$s1, arraySizePlusOne	# Size of the array + 1.
	move	$s2, $s1	# array size backup.
	addi	$t2, $s2, 0 
	li	$t5, 0		# BOOLEAN.
LoopMin:
	lw	$t0, 0($s0)	# $t0 has the current element.
	slt	$t5, $t0, $v0	# if curr is less than min, curr will be min.
	
	beq	$t5, 1, updateMin 
	addi	$t2, $t2, -1	# Decr. size.
	addi	$s0, $s0, 4	# Incr. ptr.
	beqz	$t2, reportMin
	j	LoopMin
updateMin:
	move	$v0, $t0
	addi	$t2, $t2, -1	# Decr. size.
	addi	$s0, $s0, 4	# Incr. ptr.
	j 	LoopMin

reportMin:
	move	$t8, $v0
	li	$v0, 4
	la	$a0, reportMinMsg
	syscall
	li	$v0, 1
	la	$a0, ($t8) 
	syscall
	
LoopMax:
	lw	$t0, 0($s5)	# $t0 has the current element.
	sgt	$t5, $t0, $v1	# if curr is greater than max, curr will be max.
	
	beq	$t5, 1, updateMax 
	addi	$s1, $s1, -1	# Decr. size.
	addi	$s5, $s5, 4	# Incr. ptr.
	beqz	$s1, reportMax
	j	LoopMax
updateMax:
	move	$v1, $t0
	addi	$s1, $s1, -1	# Decr. size.
	addi	$s5, $s5, 4	# Incr. ptr.
	j 	LoopMax

reportMax:
	move	$t9, $v1
	li	$v0, 4
	la	$a0, reportMaxMsg
	syscall
	li	$v0, 1
	la	$a0, ($t9) 
	syscall
	j MENU
	
noOfUniqueElements:	
	# SORTED ARRAY.
	# takes $t6 as address.
	# takes $s6 as size. 
	# takes $t2 as count.
	addi	$t2, $a1, 0
	li	$t3, 0		# Number of unique elements.	
Count:
	lw	$t0, 0($t6)	# Load the first element to $t0.
	lw 	$t1, 4($t6)	
	addi	$t2, $t2, -1	# Decr. counter.
	beqz	$t2, uniqReport
	bne	$t0, $t1, increaseCount
	j Count
increaseCount:
	addi	$t3, $t3, 1
	j Count
uniqReport:
	li	$v0, 4
	la	$a0, noOfUniqMsg
	syscall
	li	$v0, 1
	move	$a0, $t3
	syscall
	j MENU	
	
end:
	li	$v0, 10
	syscall
	
error:
	li 	$v0, 4
	la	$a0, errorMsg
	syscall
	
	.data
msg:		.asciiz		" Enter number of elements in the array: "
arrayByteSize:	.word 0
continuing:	.asciiz		" \n Moving on... \n"
newLine:	.asciiz		" \n"
errorMsg:	.asciiz		" ERROR! "
statement:	.asciiz		" \n Option 1: Generate array and sort \n Option 2: Min and Max \n Option 3: Number of Unique Elements \n Option 4: Quit \n "
serioso:	.asciiz		" Please be serious."
forMinMax:		.word		10, 40, 20, 35, 5, 73, 10, 250, 50, -5, 1, 3
arraySizePlusOne: 	.word		13
reportMinMsg:		.asciiz		" \n Min is	"
reportMaxMsg:		.asciiz		" \n Max is	"
noOfUniqMsg:		.asciiz		" \n Number of unique elements is	"